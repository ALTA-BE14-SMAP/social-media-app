// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	content "social-media-app/features/content"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ContentService is an autogenerated mock type for the ContentService type
type ContentService struct {
	mock.Mock
}

// Add provides a mock function with given fields: newContent, token, image
func (_m *ContentService) Add(newContent content.CoreContent, token interface{}, image *multipart.FileHeader) (content.CoreContent, error) {
	ret := _m.Called(newContent, token, image)

	var r0 content.CoreContent
	if rf, ok := ret.Get(0).(func(content.CoreContent, interface{}, *multipart.FileHeader) content.CoreContent); ok {
		r0 = rf(newContent, token, image)
	} else {
		r0 = ret.Get(0).(content.CoreContent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(content.CoreContent, interface{}, *multipart.FileHeader) error); ok {
		r1 = rf(newContent, token, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, contentId
func (_m *ContentService) Delete(token interface{}, contentId uint) error {
	ret := _m.Called(token, contentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, contentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ContentService) GetAll() ([]content.CoreContent, error) {
	ret := _m.Called()

	var r0 []content.CoreContent
	if rf, ok := ret.Get(0).(func() []content.CoreContent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]content.CoreContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: token, tes
func (_m *ContentService) GetById(token interface{}, tes uint) ([]content.CoreContent, error) {
	ret := _m.Called(token, tes)

	var r0 []content.CoreContent
	if rf, ok := ret.Get(0).(func(interface{}, uint) []content.CoreContent); ok {
		r0 = rf(token, tes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]content.CoreContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, tes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, id, updatedData, file
func (_m *ContentService) Update(token interface{}, id uint, updatedData content.CoreContent, file *multipart.FileHeader) (content.CoreContent, error) {
	ret := _m.Called(token, id, updatedData, file)

	var r0 content.CoreContent
	if rf, ok := ret.Get(0).(func(interface{}, uint, content.CoreContent, *multipart.FileHeader) content.CoreContent); ok {
		r0 = rf(token, id, updatedData, file)
	} else {
		r0 = ret.Get(0).(content.CoreContent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, content.CoreContent, *multipart.FileHeader) error); ok {
		r1 = rf(token, id, updatedData, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewContentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewContentService creates a new instance of ContentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContentService(t mockConstructorTestingTNewContentService) *ContentService {
	mock := &ContentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
