// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	comment "social-media-app/features/comment"

	mock "github.com/stretchr/testify/mock"
)

// CommentData is an autogenerated mock type for the CommentData type
type CommentData struct {
	mock.Mock
}

// Add provides a mock function with given fields: newComment, PostID, UserId
func (_m *CommentData) Add(newComment comment.Core, PostID uint, UserId uint) (comment.Core, error) {
	ret := _m.Called(newComment, PostID, UserId)

	var r0 comment.Core
	if rf, ok := ret.Get(0).(func(comment.Core, uint, uint) comment.Core); ok {
		r0 = rf(newComment, PostID, UserId)
	} else {
		r0 = ret.Get(0).(comment.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comment.Core, uint, uint) error); ok {
		r1 = rf(newComment, PostID, UserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: commentID, userID
func (_m *CommentData) Delete(commentID uint, userID uint) error {
	ret := _m.Called(commentID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListComments provides a mock function with given fields: PostID
func (_m *CommentData) ListComments(PostID uint) ([]comment.Core, error) {
	ret := _m.Called(PostID)

	var r0 []comment.Core
	if rf, ok := ret.Get(0).(func(uint) []comment.Core); ok {
		r0 = rf(PostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newComment, commentID, userID
func (_m *CommentData) Update(newComment comment.Core, commentID uint, userID uint) (comment.Core, error) {
	ret := _m.Called(newComment, commentID, userID)

	var r0 comment.Core
	if rf, ok := ret.Get(0).(func(comment.Core, uint, uint) comment.Core); ok {
		r0 = rf(newComment, commentID, userID)
	} else {
		r0 = ret.Get(0).(comment.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comment.Core, uint, uint) error); ok {
		r1 = rf(newComment, commentID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentData creates a new instance of CommentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentData(t mockConstructorTestingTNewCommentData) *CommentData {
	mock := &CommentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
